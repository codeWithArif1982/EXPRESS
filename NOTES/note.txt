# This is a server side web frame for node
# To develop Server side Rest API
# To develop a complete application with template engine such as PUG 




# Request Method
    The request method indicates the method to be performed on the resource identified by the given Request-URI. The method is case-sensitive and should always be mentioned in uppercase. The following table lists all the supported methods in HTTP/1.1.
        * GET
            The GET method is used to retrieve information from the given server using a given URI. Requests using GET should only retrieve data and should have no other effect on the data.
        * HEAD    
            Same as GET, but it transfers the status line and the header section only.
        * POST
            A POST request is used to send data to the server, for example, customer information, file upload, etc. using HTML forms.
        * PUT
            Replaces all the current representations of the target resource with the uploaded content.
        * DELETE
            Removes all the current representations of the target resource given by URI.
        * CONNECT
            Establishes a tunnel to the server identified by a given URI.
        * OPTIONS
            Describe the communication options for the target resource.
        * TRACE
            Performs a message loop back test along with the path to the target resource.




# HTTP - Header Fields
    * General-header
        These header fields have general applicability for both request and response messages.
            Cache-Control : cache-request-directive|cache-response-directive
                cache-request-directive
                    Cache-control: no-cache
                        A cache must not use the response to satisfy a subsequent request without successful revalidation with the origin server.
                    Cache-control: no-store
                        The cache should not store anything about the client request or server response.
                    Cache-control: max-age = seconds
                        Indicates that the client is willing to accept a response whose age is not greater than the specified time in seconds.
                    Cache-control: max-stale [ = seconds ]
                        Indicates that the client is willing to accept a response that has exceeded its expiration time. If seconds are given, it must not be expired by more than that time.
                    Cache-control: min-fresh = seconds
                        Indicates that the client is willing to accept a response whose freshness lifetime is not less than its current age plus the specified time in seconds.
                    Cache-control: no-transform 
                        Does not convert the entity-body.
                    Cache-control: only-if-cached
                        Does not retrieve new data. The cache can send a document only if it is in the cache, and should not contact the origin-server to see if a newer copy exists.
                cache-response-directive
                    public
                        Indicates that the response may be cached by any cache.
                    private
                        Indicates that all or part of the response message is intended for a single user and must not be cached by a shared cache.
                    no-cache
                        A cache must not use the response to satisfy a subsequent request without successful re-validation with the origin server.
                    no-store
                        The cache should not store anything about the client request or server response.
                    no-transform
                        Does not convert the entity-body.
                    must-revalidate
                        The cache must verify the status of the stale documents before using it and expired ones should not be used.
                    proxy-revalidate
                        The proxy-revalidate directive has the same meaning as the must- revalidate directive, except that it does not apply to non-shared user agent caches.
                    max-age = seconds
                        Indicates that the client is willing to accept a response whose age is not greater than the specified time in seconds.
                    s-maxage = seconds
                        The maximum age specified by this directive overrides the maximum age specified by either the max-age directive or the Expires header. The s-maxage directive is always ignored by a private cache.

    * Client Request-header 
        These header fields have applicability only for request messages.
    * Server Response-header
        These header fields have applicability only for response messages.
    * Entity-header
        These header fields define meta information about the entity-body or, if no body is present, about the resource identified by the request.




# Response Body
# Response Header
# Response Status
# Response Cookies


# Simple Get/Post Request => String Response
# Simple Get/Post Request => Response Status Code
# Simple Get/Post Request => JSON Response
# Simple Get/Post Request => Downloaded Response
# Simple Get/Post Request => Response Redirect
# Simple Get/Post Request => Response Header
# Simple Get/Post Request => Set Response Cookie
# Simple Get/Post Request => Clear Response Cookie


# 1xx: Informational
        It means the request has been received and the process is continuing.
            * 100 Continue
                Only a part of the request has been received by the server, but as long as it has not been rejected, the client should continue with the request.
            * 101 Switching Protocols
                The server switches protocol.
# 2xx: Success
        It means the action was successfully received, understood, and accepted. 
            * 200 OK
                The request is OK.
            * 201 Created
                The request is complete, and a new resource is created 
            * 202 Accepted
                The request is accepted for processing, but the processing is not complete.
            * 203 Non-authoritative Information
                The information in the entity header is from a local or third-party copy, not from the original server.
            * 204 No Content
                A status code and a header are given in the response, but there is no entity-body in the reply.
            * 205 Reset Content
                The browser should clear the form used for this transaction for additional input.
            * 206 Partial Content
                The server is returning partial data of the size requested. Used in response to a request specifying a Range header. The server must specify the range included in the response with the Content-Range header.
# 3xx: Redirection
        It means further action must be taken in order to complete the request.
            * 300 Multiple Choices
                A link list. The user can select a link and go to that location. Maximum five addresses  .
            * 301 Moved Permanently
                The requested page has moved to a new url.
            * 302 Found
                The requested page has moved temporarily to a new url.
            * 303 See Other
                The requested page can be found under a different url.
            * 304 Not Modified
                This is the response code to an If-Modified-Since or If-None-Match header, where the URL has not been modified since the specified date.
            * 305 Use Proxy
                The requested URL must be accessed through the proxy mentioned in the Location header.
            * 306 Unused
                This code was used in a previous version. It is no longer used, but the code is reserved.
            * 307 Temporary Redirect
                The requested page has moved temporarily to a new url.
# 4xx: Client Error
        It means the request contains incorrect syntax or cannot be fulfilled.
            * 400 Bad Request
                The server did not understand the request.
            * 401 Unauthorized
                The requested page needs a username and a password.
            * 402 Payment Required
                You can not use this code yet.
            * 403 Forbidden
                Access is forbidden to the requested page.
            * 404 Not Found
                The server can not find the requested page.
            * 405 Method Not Allowed
                The method specified in the request is not allowed.
            * 406 Not Acceptable
                The server can only generate a response that is not accepted by the client.
            * 407 Proxy Authentication Required
                You must authenticate with a proxy server before this request can be served.
            * 408 Request Timeout
                The request took longer than the server was prepared to wait.
            * 409 Conflict
                The request could not be completed because of a conflict.
            * 410 Gone
                The requested page is no longer available.
            * 411 Length Required
                The "Content-Length" is not defined. The server will not accept the request without it.
            * 412 Precondition Failed
                The pre condition given in the request evaluated to false by the server.
            * 413 Request Entity Too Large
                The server will not accept the request, because the request entity is too large.
            * 414 Request-url Too Long
                The server will not accept the request, because the url is too long. Occurs when you convert a "post" request to a "get" request with a long query information .
            * 415 Unsupported Media Type
                The server will not accept the request, because the media type is not supported.
            * 416 Requested Range Not Satisfiable
                The requested byte range is not available and is out of bounds.
            * 417 Expectation Failed
                The expectation given in an Expect request-header field could not be met by this server.

# 5xx: Server Error
        It means the server failed to fulfill an apparently valid request.
            * 500 Internal Server Error
                The request was not completed. The server met an unexpected condition.
            * 501 Not Implemented
                The request was not completed. The server did not support the functionality required.
            * 502 Bad Gateway
                The request was not completed. The server received an invalid response from the upstream server.
            * 503 Service Unavailable
                The request was not completed. The server is temporarily overloading or down.
            * 504 Gateway Timeout
                The gateway has timed out.
            * 505 HTTP Version Not Supported
                The server does not support the "http protocol" version.
